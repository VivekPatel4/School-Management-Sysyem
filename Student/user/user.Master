<%@ Master Language="C#" AutoEventWireup="true" CodeBehind="user.master.cs" Inherits="Student.user.user" %>

<!DOCTYPE html>

<html>
<head runat="server">
    <title></title>
    <link href="..\user\table.css" rel="stylesheet" />
    <link href="..\assets\css\themify-icons.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
    <link href="..\user\UserStyle.css" rel="stylesheet" />
    <style>
        .helpbuddy-container {
            position: fixed;
            bottom: 30px;
            right: 30px;
            z-index: 1000;
        }

        .helpbuddy-button {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
        }

        .helpbuddy-button:hover {
            transform: scale(1.1);
            background: #45a049;
        }

        .helpbuddy-chat {
            position: fixed;
            bottom: 100px;
            right: 30px;
            width: 730px;
            height: 600px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            display: none;
            flex-direction: column;
            z-index: 1000;
        }

        .chat-header {
            background: #4CAF50;
            color: white;
            padding: 15px;
            border-radius: 10px 10px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .chat-messages {
            flex: 1;
            padding: 15px;
            overflow-y: auto;
        }

        .chat-input {
            padding: 15px;
            border-top: 1px solid #eee;
            display: flex;
        }

        .chat-input input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 20px;
            margin-right: 10px;
        }

        .chat-input button {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 20px;
            cursor: pointer;
        }

        .message {
            margin-bottom: 15px;
            max-width: 85%;
        }

        .user-message {
            margin-left: auto;
            background: #e3f2fd;
            padding: 10px 15px;
            border-radius: 15px;
        }

        .bot-message {
            background: #f1f1f1;
            padding: 10px 15px;
            border-radius: 15px;
            white-space: pre-wrap;
        }

        .typing-indicator {
            display: flex;
            align-items: center;
            padding: 10px 15px;
            background: #f1f1f1;
            border-radius: 15px;
            margin-bottom: 15px;
            max-width: 80%;
        }

        .typing-indicator span {
            height: 8px;
            width: 8px;
            background: #4CAF50;
            border-radius: 50%;
            display: inline-block;
            margin-right: 5px;
            animation: typing 1s infinite;
        }

        .typing-indicator span:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-indicator span:nth-child(3) {
            animation-delay: 0.4s;
        }

        @keyframes typing {
            0% { transform: translateY(0); }
            50% { transform: translateY(-5px); }
            100% { transform: translateY(0); }
        }

        .message a {
            color: #4CAF50;
            text-decoration: none;
            font-weight: bold;
        }

        .message a:hover {
            text-decoration: underline;
        }
    </style>
    <asp:ContentPlaceHolder ID="head" runat="server">
    </asp:ContentPlaceHolder>
</head>
<body>
    <form id="form1" runat="server">

        <nav class="navbar">
            <img src="../assets/images/icon/vivek2.png" height="50" alt="logo">
            <a href="Leave.aspx" class="nav-item"><i class="ti-user"></i>Apply Leave</a><br />
            <a href="LeaveHistory.aspx" class="nav-item"><i class="ti-agenda"></i>View My Leave History</a>
            <a href="match-face.aspx" class="nav-item"><i class="ti-check-box"></i>Attendance</a>
            <a href="TimeTable.aspx" class="nav-item"><i class="ti-calendar"></i>Time-Table</a>
            <a href="FeePayment.aspx" class="nav-item"><i class="ti-money"></i>Fees Pay</a>
        </nav>
        <div class="ls">
            <div class="user-profile pull-right">
                <img class="avatar user-thumb" src="../assets/images/avatar.jpg" alt="avatar" />
                <h4 class="user-name dropdown-toggle" data-toggle="dropdown">
                    <asp:Label ID="lblstdDetails" runat="server" CssClass="std-details"></asp:Label>
                    <i class="ti-angle-down"></i>
                </h4>
                <div class="dropdown-menu">
                    <a class="dropdown-item" href="my-profile.aspx">View Profile</a>
                    <a class="dropdown-item" href="change-password-student.aspx">Password</a>
                    <asp:LinkButton
                        ID="btnLogout"
                        runat="server"
                        CssClass="dropdown-item"
                        OnClick="btnLogout_Click"
                        CausesValidation="false">
                        Log Out
                    </asp:LinkButton>

                </div>
            </div>
        </div>

        <asp:ContentPlaceHolder ID="ContentPlaceHolder1" runat="server">
        </asp:ContentPlaceHolder>

        <div class="helpbuddy-container">
            <button class="helpbuddy-button" onclick="toggleChat()">
                <i class="fas fa-robot fa-2x"></i>
            </button>
        </div>

        <div class="helpbuddy-chat" id="helpbuddyChat">
            <div class="chat-header">
                <span>HelpBuddy AI Assistant</span>
                <button onclick="toggleChat()" style="background: none; border: none; color: white; cursor: pointer;">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="chat-messages" id="chatMessages">
                <div class="message bot-message">
                    Hello! I'm your AI assistant. How can I help you today?
                </div>
            </div>
            <div class="chat-input">
                <input type="text" id="userInput" placeholder="Type your message..." />
                <button type="button" onclick="sendMessage()">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>

        <script>
            // Initialize chat state from localStorage
            document.addEventListener('DOMContentLoaded', function() {
                const chat = document.getElementById('helpbuddyChat');
                const isChatOpen = localStorage.getItem('helpbuddyChatOpen') === 'true';
                chat.style.display = isChatOpen ? 'flex' : 'none';
                
                // Load chat history if exists
                const chatHistory = localStorage.getItem('helpbuddyChatHistory');
                if (chatHistory) {
                    const messagesDiv = document.getElementById('chatMessages');
                    messagesDiv.innerHTML = chatHistory;
                    messagesDiv.scrollTop = messagesDiv.scrollHeight;
                }
            });

            function toggleChat() {
                const chat = document.getElementById('helpbuddyChat');
                const isOpen = chat.style.display === 'flex';
                chat.style.display = isOpen ? 'none' : 'flex';
                localStorage.setItem('helpbuddyChatOpen', !isOpen);
            }

            async function sendMessage(event) {
                if (event) {
                    event.preventDefault();
                }
                
                const input = document.getElementById('userInput');
                const message = input.value.trim();
                if (!message) return;

                // Add user message to chat
                addMessage(message, 'user');
                input.value = '';

                // Show typing indicator
                const typingIndicator = document.createElement('div');
                typingIndicator.className = 'typing-indicator';
                typingIndicator.innerHTML = '<span></span><span></span><span></span>';
                document.getElementById('chatMessages').appendChild(typingIndicator);

                try {
                    // Call Gemini API
                    const response = await fetch("https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDv-IEkwyfWigZiW_yNhCcWOuoEZdhL08I", {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            contents: [{
                                parts: [{
                                    text: message
                                }]
                            }]
                        })
                    });

                    const data = await response.json();
                    const botResponse = data.candidates[0].content.parts[0].text;

                    // Remove typing indicator
                    typingIndicator.remove();

                    // Add bot response to chat
                    addMessage(botResponse, 'bot');
                    
                    // Save chat history to localStorage
                    saveChatHistory();
                } catch (error) {
                    console.error('Error:', error);
                    // Remove typing indicator
                    typingIndicator.remove();
                    addMessage("Sorry, I'm having trouble connecting right now. Please try again later.", 'bot');
                }
            }

            function addMessage(text, sender) {
                const messagesDiv = document.getElementById('chatMessages');
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${sender}-message`;
                
                // Split text into lines to process URLs line by line
                let lines = text.split('\n');
                
                // Process each line separately
                lines = lines.map(line => {
                    // First remove markdown-style links and extract the URL
                    line = line.replace(/\[([^\]]+)\]\((https?:\/\/[^)]+)\)/g, '$2');
                    
                    // URL detection with validation
                    const urlRegex = /https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)/g;
                    
                    // Find all URLs in the line
                    const urls = line.match(urlRegex) || [];
                    
                    // Get unique valid URLs
                    const validUrls = [...new Set(urls)].filter(url => {
                        try {
                            new URL(url);
                            return true;
                        } catch {
                            return false;
                        }
                    });
                    
                    // Process each unique URL only once
                    let processedLine = line;
                    validUrls.forEach(url => {
                        const escapedUrl = url.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
                        const linkHtml = `<a href="${url}" target="_blank" rel="noopener noreferrer">${url}</a>`;
                        // Replace only the first occurrence
                        processedLine = processedLine.replace(new RegExp(escapedUrl), linkHtml);
                    });
                    
                    return processedLine;
                });
                
                // Join lines back together
                messageDiv.innerHTML = lines.join('\n');
                messagesDiv.appendChild(messageDiv);
                messagesDiv.scrollTop = messagesDiv.scrollHeight;
            }

            function saveChatHistory() {
                const messagesDiv = document.getElementById('chatMessages');
                localStorage.setItem('helpbuddyChatHistory', messagesDiv.innerHTML);
            }

            // Allow sending message with Enter key
            document.getElementById('userInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    sendMessage();
                }
            });

            // Prevent form submission when clicking the send button
            document.querySelector('.chat-input button').addEventListener('click', function(e) {
                e.preventDefault();
                sendMessage();
            });
        </script>
    </form>
</body>
</html>
